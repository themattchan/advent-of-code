#ip 4
// R0=1, R1=0, R2=0, R3=0, R4=0, R5=0

begin:

 0:   addi 4 16 4 // R4 = R4+16    // jmp setup

foo:

 1:   seti 1 1 1  // R1 = 1

bar:

 2:   seti 1 7 3  // R3 = 1


/*
****** baz

R2 = R1 * R3

if (R2 == R5) {
   R2 = 1
   R0 += R1
   R3++
} else {
   R2 = 0
   R3++
}
if (R3 > R5) {
    R2 = 1
    R1++;
    if (R1 > R5) HALT else jmp bar
  } else {
    R2 = 0
    jmp baz
}
*/

baz:

 3:   mulr 1 3 2  // R2 = R1 * R3

 {
 // if (R2 == R5) R0 += R1; R3++ else R3++

 4:   eqrr 2 5 2  // R2 = R2 == R5 ? 1 : 0
 5:   addr 2 4 4  // R4 = R2 + R4  // skip #R2 lines
 6:   addi 4 1 4  // R4 = 6 + 1    // goto 8
 7:   addr 1 0 0  // R0 = R1 + R0
 8:   addi 3 1 3  // R3 = R3 + 1
 }

 {
 // if (R3 > R5) R1++ else jmp baz

 9:   gtrr 3 5 2  // R2 = R3 > R5 ? 1 : 0
10:   addr 4 2 4  // R4 = R4 + R2  // skip #R2 lines
11:   seti 2 3 4  // R4 = 2        // goto 3
12:   addi 1 1 1  // R1 = R1 + 1
 }

{
// if (R1 > R5) HALT else jmp bar
13:   gtrr 1 5 2  // R2 = R1 > R5 ? 1 : 0
14:   addr 2 4 4  // R4 = R2 + R4  // skip #R2 lines
15:   seti 1 6 4  // R4 = 1        // goto 2
16:   mulr 4 4 4  // R4 = R4 * R4  // HALT!
}

//------------------------------------------

setup:
/*
****** setup
R5 = ((R5 + 2) * (R5 + 2)) * 209
R2 = ((R2 + 1) * 22) + 6
R5 = R5 + R2
if (R0 == 0) jmp foo
else if (R0 >= 10) HALT
else jmp (work + R0)
*/

{
17:   addi 5 2 5  // R5 = R5 + 2
18:   mulr 5 5 5  // R5 = R5 * R5
19:   mulr 4 5 5  // R5 = 19 * R5
20:   muli 5 11 5 // R5 = R5 * 11
// R5 = ((R5 + 2) * (R5 + 2)) * 209
// after first entry: R5 = 704

21:   addi 2 1 2  // R2 = R2 + 1
22:   mulr 2 4 2  // R2 = R2 * 22
23:   addi 2 6 2  // R2 = R2 + 6
// R2 = ((R2 + 1) * 22) + 6
// after first entry: R2 = 28

24:   addr 5 2 5  // R5 = R5 + R2
// after first entry: R5 = 732

25:   addr 4 0 4  // R4 = R4 + R0 // skip #R0 lines
26:   seti 0 0 4  // R4 = 0       // jmp foo (goto 1)
}

work:

{
27:   setr 4 5 2  // R2 = 27
28:   mulr 2 4 2  // R2 = 28 * R2
29:   addr 4 2 2  // R2 = 29 + R2
30:   mulr 4 2 2  // R2 = 30 * R2
31:   muli 2 14 2 // R2 = R2 * 14
32:   mulr 2 4 2  // R2 = R2 * 32
// R2 = 10550400
33:   addr 5 2 5  // R5 = R5 + R2
// R5 = R5 + 10550400
34:   seti 0 5 0  // R0 = 0
35:   seti 0 2 4  // R4 = 0        // jmp foo (goto 1)
}

--------------------------------------------------------------------------------

 0; ip = 16
17; R5 = 2
18; R5=4
19; R5 = 64
20; R5 = 704
21; R2 = 1
22; R2 = 16
23; R2 = 22
24; R5 = 726
25; ip = 26
27; R2 = 27
28; R2 = 756
29; R2 = 785
30; R2 = 23550
31; R2 = 329700
32; R2 = 10550400
33; R5 = 10551136
34; R0 = 0
35; ip = 0
 1; R1 = 1
 2; R3 = 1
 3; R2 = 1
 4; R2 = 0 // R2 == R5 ? 1 : 0
 5; ip = ip
 6; ip = 7
 8;

--------------------------------------------------------------------------------=
## STRUCTURED PROGRAM

#ip 4
// R0=1, R1=0, R2=0, R3=0, R4=0, R5=0

begin: jmp setup
setup:
       R5 = ((R5 + 2) * (R5 + 2)) * 209
       R2 = ((R2 + 1) * 22) + 6
       R5 = R5 + R2

       R2 = 27
       R2 = 28 * R2
       R2 = 29 + R2
       R2 = 30 * R2
       R2 = R2 * 14
       R2 = R2 * 32

       R5 = R5 + R2
       R0 = 0
       jmp foo

foo:
       R1 = 1

bar:
       R3 = 1
baz:
       R2 = R1 * R3

       if (R2 == R5) {
          R0 += R1
          R3++
       } else {
          R3++
       }

       if (R3 > R5) {
           R1++;
           if (R1 > R5) {
             HALT
           } else {
             jmp bar
           }
       } else {
           jmp baz
       }

--------------------------------------------------------------------------------=
## STRUCTURED PROGRAM 2

#ip 4
// R0=1, R1=0, R2=0, R3=0, R4=0, R5=0

begin:
       R5 = 10551264
       R0 = 0
       R1 = 1

bar:
       R3 = 1
baz:
       R2 = R1 * R3

       if (R2 == R5) {
          R0 += R1
	   }

       R3++

       if (R3 > R5) {
           R1++;
           if (R1 > R5) {
             HALT  (output R0)
           } else {
             jmp bar
           }
       } else {
           jmp baz
       }


keep going until R1 > R5.

When R3 > R5, R1 increases +1 then reset R3=1.
every inner loop is a test if R1 is a factor of R5. If so, add it to accumulator R0.
R1 ranges from 1..R5+1.


r = 0
for i = 1 to R5:
  for j = 1 to R5:
    if i*j == R5:
	  r += i
ret r

Therefore, the program computes sum(factors(R5)) = 27941760 according to wolfram alpha.
